library(plot3D)
B <- 10^4
set.seed(1982)
Ut <- runif(B)
head(Ut)
library(plot3D)
B <- 10^4
set.seed(1982)
Ut <- runif(B)
head(Ut)
segments3D(Ut)
library(plot3D)
B <- 10^4
set.seed(1982)
Ut <- runif(B)
head(Ut)
segments3D(head(Ut))
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
#First
library(plot3D)
# Number of steps
steps <- 10^4
# Seed Set
set.seed(1982)
Ut <- runif(steps)
head(Ut)
# Direction probability
probs <- c(0.25, 0.5, 0.75)
# Initial matrix
step_direction <- matrix(0, steps+1, 2)
# Start random walk
for (i in seq(2, steps+1)){
# Draw a random number from U(0,1)
rn = runif(1)
# Go right if rn \in [0,prob[1])
if (rn < probs[1]) {step_direction[i,1] = 1}
# Go left if rn \in [probs[1], probs[2])
if (rn >= probs[1] && rn < probs[2]) {step_direction[i,1] = -1}
# Go forward if rn \in [probs[2], probs[3])
if (rn >= probs[2] && rn < probs[3]) {step_direction[i,2] = 1}
# Go backward if rn \in [probs[3],1]
if (rn >= probs[3]) {step_direction[i,2] = -1}
}
# Cumulative steps
position = data.frame(x = cumsum(step_direction[, 1]),
y = cumsum(step_direction[, 2]))
# Graph parameters
color = "blue4"
xlab = "X-position"
ylab = "Y-position"
pt_pch = 16
pt.cex = 2
main = paste("Segment 3D Graph w/", steps, "steps", sep = " ")
hues = seq(15, 375, length = 3)
pt_col = hcl(h = hues, l = 65, c = 100)[1:2]
par(mar = c(5.1, 5.1, 1, 2.1))
# Main plot
plot(NA,  xlim = range(position[,1]),
ylim = range(range(position[,2])),
xlab = xlab, ylab = ylab, xaxt = 'n',
yaxt = 'n', bty = "n", ann = FALSE)
win_dim = par("usr")
par(new = TRUE)
plot(NA, xlim = range(position[,1]), ylim = c(win_dim[3], win_dim[4] + 0.09*(win_dim[4] - win_dim[3])),
xlab = xlab, ylab = ylab, xaxt = 'n', yaxt = 'n', bty = "n")
win_dim = par("usr")
# Add grid
grid(NULL, NULL, lty = 1, col = "grey95")
# Add title
x_vec = c(win_dim[1], win_dim[2], win_dim[2], win_dim[1])
y_vec = c(win_dim[4], win_dim[4],
win_dim[4] - 0.09*(win_dim[4] - win_dim[3]),
win_dim[4] - 0.09*(win_dim[4] - win_dim[3]))
polygon(x_vec, y_vec, col = "grey95", border = NA)
text(x = mean(c(win_dim[1], win_dim[2])), y = (win_dim[4] - 0.09/2*(win_dim[4] - win_dim[3])), main)
# Add axes and box
lines(x_vec[1:2], rep((win_dim[4] - 0.09*(win_dim[4] - win_dim[3])),2), col = 1)
box()
axis(1, padj = 0.3)
y_axis = axis(2, labels = FALSE, tick = FALSE)
y_axis = y_axis[y_axis < (win_dim[4] - 0.09*(win_dim[4] - win_dim[3]))]
axis(2, padj = -0.2, at = y_axis)
# Add trajectory
lines(position, type = "l", col = color, pch = 16)
# Start and end points
points(c(0,position[steps+1,1]), c(0,position[steps+1,2]), cex = pt.cex, col = pt_col, pch = pt_pch)
# Legend
leg_pos = c(min(position[,1]), max(position[,2]))
legend(leg_pos[1], leg_pos[2], c("Start","End"),
col = pt_col, pch = pt_pch, pt.cex = pt.cex, bty = "n")
install.packages("animations")
install.packages("animation")
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
source('~/stat297hw2/Random_Walk_Problem.R', echo=TRUE)
